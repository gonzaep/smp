#!/usr/bin/env bash

#
# Provides functions to help setup keystores that will be used in Docker images.
#

#
# Downloads the certificate of an SSL server certificate into a file having the provided name. The ".pem" extension is
# automatically appended to the file name and the file will be created into the ${CERTIFICATES} location.
#
# Args:
#   $1 - SSL server host and port, divided by the ':' character
#   $2 - the name of the file into which to save the certificate
downloadSslCertificate() {
	: "${CERTIFICATES:?Need to set CERTIFICATES non-empty}"
	: "${1:?Please provide the SSL server host and port (i.e. host:port) as the first parameter}"
	: "${2:?Please provide the certificate name as the second parameter (e.g. 'red_gw', 'be00000001')}"

	local serverHostAndPort="${1}"
	local certificateName="${2}"

	echo "Downloading SSL certificate from ${serverHostAndPort} to the ${CERTIFICATES} location: certificateName=${certificateName}"

	keytool -printcert \
		-sslserver "${serverHostAndPort}" \
		-rfc 2>/dev/null >"${CERTIFICATES}"/"${certificateName}".pem
}

#
# Checks whether a keystore entry exists in a keystore file.
#
# Args:
#   $1 - keystore file name
#   $2 - alias for the entry to be checked for its existence (e.g. 'red_gw', 'blue_gw')
#   $3 - keystore password
#   $4 - (optional) keystore type; "JKS" by default
containsKeystoreEntry() {
	: "${1:?Please provide the keystore file name as the first parameter}"
	: "${2:?Please provide the alias for the keystore entry as the second parameter (e.g. 'red_gw', 'blue_gw')}"
	: "${3:?Please provide the keystore password as the third parameter}"

	local keystoreFileName="${1}"
	local keystoreAlias="${2}"
	local keystorePassword="${3}"
	local keystoreType="${4:-JKS}"

	echo "Checking for the presence of the keystore entry ${keystoreAlias} inside keystore ${keystoreFileName}: \
keystorePassword=${keystorePassword}, keystoreType=${keystoreType}"

	local result=$(keytool -list -alias "${keystoreAlias}" \
		-storetype "${keystoreType}" \
		-keystore "${keystoreFileName}" \
		-storepass "${keystorePassword}" \
		-rfc 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | wc -l)

	((result > 0))
}

#
# Exports an entry from a keystore file to a certificate file. The certificate file will have the same name
# as the alias of the entry and will be exported to the ${CERTIFICATES} location, having a ".pem" extension.
#
# Args:
#   $1 - keystore file name
#   $2 - alias for the entry to be exported (e.g. 'red_gw', 'blue_gw')
#   $3 - keystore password
#   $4 - (optional) keystore type; "JKS" by default
exportCertificate() {
	: "${CERTIFICATES:?Need to set CERTIFICATES non-empty}"
	: "${1:?Please provide the keystore file name as the first parameter}"
	: "${2:?Please provide the alias for the keystore entry as the second parameter (e.g. 'red_gw', 'blue_gw')}"
	: "${3:?Please provide the keystore password as the third parameter}"

	local keystoreFileName="${1}"
	local keystoreAlias="${2}"
	local keystorePassword="${3}"
	local keystoreType="${4:-JKS}"

	echo "Exporting entry from ${keystoreFileName}: keystoreAlias=${keystoreAlias}, keystorePassword=${keystorePassword}, \
keystoreType=${keystoreType}"

	keytool -exportcert \
		-alias "${keystoreAlias}" \
		-file "${CERTIFICATES}/${keystoreAlias}.pem" \
		-storetype "${keystoreType}" \
		-keystore "${keystoreFileName}" \
		-storepass "${keystorePassword}" \
		-rfc \
		-v 2>/dev/null
}

#
# Imports an entry into a keystore file from an existing certificate file. The certificate file MUST have the same name
# as the alias of the entry to be imported and MUST be present in the ${CERTIFICATES} location, having a ".pem" extension.
#
# Args:
#   $1 - keystore file name
#   $2 - alias for the entry to be imported (e.g. 'red_gw', 'blue_gw')
#   $3 - keystore password
#   $4 - private key password
#   $5 - (optional) keystore type; "JKS" by default
importCertificate() {
	: "${CERTIFICATES:?Need to set CERTIFICATES non-empty}"
	: "${1:?Please provide the keystore file name as the first parameter}"
	: "${2:?Please provide the alias for the keystore entry as the second parameter (e.g. 'red_gw', 'blue_gw')}"
	: "${3:?Please provide the keystore password as the third parameter}"
	: "${4:?Please provide the private key password for the keystore entry as the fourth parameter}"

	local keystoreFileName="${1}"
	local keystoreAlias="${2}"
	local keystorePassword="${3}"
	local privateKeyPassword="${4}"
	local keystoreType="${5:-JKS}"

	echo "Importing entry into ${keystoreFileName}: keystoreAlias=${keystoreAlias}, keystorePassword=${keystorePassword}, \
privateKeyPassword=${privateKeyPassword}, keystoreType=${keystoreType}"

	keytool -importcert \
		-alias "${keystoreAlias}" \
		-file "${CERTIFICATES}/${keystoreAlias}.pem" \
		-keypass "${privateKeyPassword}" \
		-noprompt \
		-storetype "${keystoreType}" \
		-keystore "${keystoreFileName}" \
		-storepass "${keystorePassword}" \
		-v 2>/dev/null
}

#
# Imports a single or all of the entries from a source keystore to a destination keystore. The source and destination
# keystores must be in the same directory.
#
# If the source alias is missing, all the entries are imported from the source keystore; otherwise, only a single entry
# is imported. If a destination alias is not provided, then source alias is used as the destination alias.
#
# Unless otherwise specified, the source and destination keystore are by default of type "JKS".
#
# Args:
#   $1 - source keystore file name
#   $2 - destination keystore file name
#   $3 - source keystore password
#   $4 - destination keystore password
#   $5 - source private key password
#   $6 - destination private key password
#   $7 - (optional) source alias for the entry to be imported (e.g. 'red_gw', 'blue_gw');
#   $8 - (optional) destination alias for the entry to be imported (e.g. 'red_gw', 'blue_gw');
#   $9 - (optional) source keystore type; "JKS" by default
#   $10 - (optional) destination keystore type; "JKS" by default
importKeystore() {
	: "${1:?Please provide the source keystore file name as the first parameter}"
	: "${2:?Please provide the destination keystore file name as the second parameter}"
	: "${3:?Please provide the source keystore password as the third parameter}"
	: "${4:?Please provide the destination keystore password as the fourth parameter}"
	: "${5:?Please provide the private key password for the source keystore entry as the fifth parameter}"
	: "${6:?Please provide the private key password for the destination keystore entry as the sixth parameter}"

	local srcKeystoreFileName="${1}"
	local destKeystoreFileName="${2}"
	local srcKeystorePassword="${3}"
	local destKeystorePassword="${4}"
	local sourcePrivateKeyPassword="${5}"
	local destinationPrivateKeyPassword="${6}"
	local sourceKeystoreAlias="${7}"
	local destinationKeystoreAlias="${8}"
	local sourceKeystoreType="${9:-JKS}"
	local destinationKeystoreType="${10:-JKS}"

	echo "Importing keystore entries from ${srcKeystoreFileName} to ${destKeystoreFileName}: \
srcKeystorePassword=${srcKeystorePassword}, destKeystorePassword=${destKeystorePassword}, \
sourcePrivateKeyPassword=${sourcePrivateKeyPassword}, destinationPrivateKeyPassword=${destinationPrivateKeyPassword}, \
sourceKeystoreAlias=${sourceKeystoreAlias}, destinationKeystoreAlias=${destinationKeystoreAlias}, \
sourceKeystoreType=${sourceKeystoreType}, destinationKeystoreType=${destinationKeystoreType}"

	keytool -importkeystore \
		-srckeystore "${srcKeystoreFileName}" \
		-destkeystore "${destKeystoreFileName}" \
		-srcstorepass "${srcKeystorePassword}" \
		-deststorepass "${destKeystorePassword}" \
		-srckeypass "${sourcePrivateKeyPassword}" \
		-destkeypass "${destinationPrivateKeyPassword}" \
		-noprompt \
		${sourceKeystoreAlias:+-srcalias "${sourceKeystoreAlias}"} \
		${destinationKeystoreAlias:+-destalias "${destinationKeystoreAlias}"} \
		-srcstoretype "${sourceKeystoreType}" \
		-deststoretype "${destinationKeystoreType}" \
		-v 2>/dev/null
}

#
# Removes an existing entry from a keystore file.
#
# Args:
#   $1 - keystore file name
#   $2 - alias for the entry to be removed (e.g. 'red_gw', 'blue_gw')
#   $3 - keystore password
#   $4 - (optional) keystore type; "JKS" by default
removeKeystoreEntry() {
	: "${1:?Please provide the keystore file name as the first parameter}"
	: "${2:?Please provide the alias for the keystore entry as the second parameter (e.g. 'red_gw', 'blue_gw')}"
	: "${3:?Please provide the keystore password as the third parameter}"

	local keystoreFileName="${1}"
	local keystoreAlias="${2}"
	local keystorePassword="${3}"
	local keystoreType="${4:-JKS}"

	echo "Removing entry from ${keystoreFileName}: keystoreAlias=${keystoreAlias}, keystorePassword=${keystorePassword}, \
keystoreType=${keystoreType}"

	keytool -delete \
		-alias "${keystoreAlias}" \
		-storetype "${keystoreType}" \
		-keystore "${keystoreFileName}" \
		-storepass "${keystorePassword}" \
		-v 2>/dev/null
}

#
# Creates a new keystore with one key/certificate C=EU,O=eDelivery,OU=SMP_TEST,CN=${keystoreAlias}".
#
# Args:
#   $1 - alias for the keystore entry (e.g. 'red_gw', 'blue_gw')
#   $2 - keystore password
#   $3 - private key password
#   $4 - domain name to use as prefix for the keystore files; empty for the default domain
generateKeyStore() {
	: "${CERTIFICATES:?Need to set CERTIFICATES non-empty}"
	: "${1:?Please provide the alias of the keystore entry as the first parameter (e.g. 'red_gw', 'blue_gw')}"
	: "${2:?Please provide the keystore password as the second parameter}"
	: "${3:?Please provide the private key password as the third parameter}"
	: "${4:?Please provide the keystore path as the fourth parameter}"

	local keystoreAlias="${1}"
	local keystorePassword="${2}"
	local privateKeyPassword="${3}"
	local keystoreFilePath="${4}"

	echo "Generating keystore ${keystoreFilePath} using: keystoreAlias=${keystoreAlias}"

	if containsKeystoreEntry "${keystoreFilePath}" "${keystoreAlias}" "${keystorePassword}"; then
		echo "Cert with keystoreAlias=${keystoreAlias}  already exists in  ${keystoreFilePath}. Deleting keystore entry before creating it again!"
		removeKeystoreEntry "${keystoreFilePath}" "${keystoreAlias}" "${keystorePassword}"
	fi

	keytool -genkeypair \
		-dname "C=EU,O=eDelivery,OU=SMP_TEST,CN=${keystoreAlias}" \
		-alias "${keystoreAlias}" \
		-keyalg RSA \
		-keysize 2048 \
		-keypass "${privateKeyPassword}" \
		-validity 3652 \
		-storetype PKCS12 \
		-keystore "${keystoreFilePath}" \
		-storepass "${keystorePassword}" \
		-v 2>/dev/null

	if [ -f "${CERTIFICATES}/${keystoreAlias}.pem" ]; then
		echo "The certificate ${CERTIFICATES}/${keystoreAlias}.pem shouldn't already exist"
		exit 1
	fi

	exportCertificate "${keystoreFilePath}" "${keystoreAlias}" "${keystorePassword}"

	chmod a+w "${keystoreFilePath}"
}

#
# Imports an existing public-key certificate into a truststore. If the truststore is missing, it will be created. The
# name of the truststore chosen as destination will be "gateway_truststore.jks" unless the optional domain name
# argument is provided - in this case the name of the truststore used will be "gateway_truststore_DOMAIN.jks" -.
#
# Args:
#   $1 - alias for the destination entry (e.g. 'red_gw', 'blue_gw')
#   $2 - keystore password for the destination truststore
#   $3 - private key password for both the destination entry
#   $4 - domain name to use as prefix for the truststore file; empty for the default domain
updateTrustStore() {
	: "${CERTIFICATES:?Need to set CERTIFICATES non-empty}"
	: "${1:?Please provide the alias for both the source and destination keystore entries as the first parameter (e.g. 'red_gw', 'blue_gw')}"
	: "${2:?Please provide the keystore password for both the source and destination keystores as the second parameter}"
	: "${3:?Please provide the private key password for both the source and destination keystore entries as the third parameter}"
	: "${4:?Please provide the domain name as the fourth parameter}"

	local keystoreAlias="${1}"
	local keystorePassword="${2}"
	local privateKeyPassword="${3}"
	local domainName="${4}"
	local truststoreFileName="${domainName}-gateway_truststore.jks"

	echo "Updating truststore ${truststoreFileName} using: keystoreAlias=${keystoreAlias}, domainName=${domainName}"

	if containsKeystoreEntry "${truststoreFileName}" "${keystoreAlias}" "${keystorePassword}"; then
		echo "Cert with keystoreAlias=${keystoreAlias}  already exists in ${truststoreFileName}. Deleting truststore entry before importing certificate!"
		removeKeystoreEntry "${truststoreFileName}" "${keystoreAlias}" "${keystorePassword}"
	fi

	importCertificate "${truststoreFileName}" "${keystoreAlias}" "${keystorePassword}" "${privateKeyPassword}"

	chmod a+w "${truststoreFileName}"
}
